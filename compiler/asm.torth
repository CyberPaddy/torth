include "std"
include "compiler/utils"
include "compiler/class/Op"

function initialize_asm -> str :
  "compiler/templates/torth_template.asm" read_file
end

// Get Assembly for certain Op
// Params: Pointer to Op (PTR)
// Return: Assembly
function get_op_asm ptr -> str :
  if dup Op.get_type OpType.PUSH_BOOL == do
    dup Op.get_token Token.get_value str.upper get_push_bool_asm
  elif dup Op.get_type OpType.PUSH_CHAR == do
    dup Op.get_token Token.get_value 1 str.char_at get_push_char_asm
  elif dup Op.get_type OpType.PUSH_INT == do
    dup Op.get_token Token.get_value get_push_int_asm
  elif dup Op.get_type OpType.PUSH_STR == do
    "TODO: Generating assembly for OpType.PUSH_STR is not implemented yet.\n"
    "" swap NotImplementedError
  elif dup Op.get_type OpType.PUSH_PTR == do
    dup Op.get_token Token.get_value get_push_ptr_asm
  elif dup Op.get_type OpType.INTRINSIC == do
    // Get Operand's Token.value
    dup Op.get_token Token.get_value str.upper
    if dup "AND" streq do
      get_and_asm
    elif dup "PLUS" streq do
      get_plus_asm
    elif dup "PRINT" streq do
      get_print_asm
    else
      "Generating assembly for intrinsic '" over str.cat
      "' is not implemented yet\n" str.cat
      "" swap NotImplementedError
    endif swap drop
  else
    "Generating assembly for '" over Op.get_token Token.get_value str.cat
    "' is not implemented: Unknown word\n" str.cat
    "" swap NotImplementedError
  endif swap drop
end

// Get Assembly comment for Op
// Params: Pointer to Op (PTR)
// Return: Comment string (STR)
function get_op_comment_asm ptr -> str :
  // Comment format as Python3 f-string:
  // f";; [{function_name}] {token_value} | File: {file}, Row: {row}, Col: {col}\n"
  ";; ["
  over Op.get_function Function.get_name  str.cat
  "] "                                    str.cat
  over Op.get_token Token.get_value       str.cat
  " | File: "                             str.cat

  // Forget the pointer to Op and get its Token's Location instead
  swap Op.get_token Token.get_location dup

  // Add file, row and column information
  Location.get_file rot swap str.cat
  ", Row: " str.cat swap dup
  Location.get_row itoa rot swap str.cat
  ", Column: " str.cat swap
  Location.get_column itoa str.cat
  "\n" str.cat
end

// Generate Assembly for OpType.PUSH_BOOL
// Params: Op.token.value
// Return: Assembly
function get_push_bool_asm str -> str :
  if dup "TRUE" streq
  do drop   "  mov rax, 1\n"
  else drop "  mov rax, 0\n"
  endif     "  push rax\n" str.cat
end

// Generate Assembly for OpType.PUSH_CHAR
// Params: Op.token.value[1] ('a' => a)
// Return: Assembly
function get_push_char_asm char -> str :
  int itoa
  "  mov rax, " swap  str.cat
  "\n  push rax\n"    str.cat
end

// Generate Assembly for OpType.PUSH_INT
// Params: Op.token.value
// Return: Assembly
function get_push_int_asm str -> str :
  "  mov rax, " swap  str.cat
  "\n  push rax\n"    str.cat
end

// Generate Assembly for OpType.PUSH_PTR
// Params: Op.token.value
// Return: Assembly
function get_push_ptr_asm str -> str :
  "  mov rax, " swap  str.cat
  "\n  push rax\n"    str.cat
end

// AND performs bitwise-AND operation to two integers
// Params: None
// Return: Assembly
function get_and_asm -> str :
  "  pop rax\n"
  "  pop rbx\n"       str.cat
  "  and rbx, rax\n"  str.cat
  "  push rbx\n"      str.cat
end

// Pop two integers from the stack and push the sum of the two values
// Params: None
// Return: Assembly
function get_plus_asm -> str :
  "  pop rbx\n"
  "  pop rax\n"       str.cat
  "  add rax, rbx\n"  str.cat
  "  push rax\n"      str.cat
end

// Pop an integer from the stack and print the value of it to the stdout
// Params: None
// Return: Assembly
function get_print_asm -> str :
  "  pop rdi\n"
  "  call print\n"    str.cat
end

function get_exit_assembly -> str :
  ";; -- exit syscall\n"
  "  mov rax, sys_exit\n" str.cat
  "  mov rdi, 0\n"           str.cat
  "  syscall\n"         str.cat
end

// Generate assembly code for NASM
// Params: Pointer to Program (PTR)
// Return: Intel x86_64 Assembly for NASM (STR)
memory op_asm str.size end
function generate_asm ptr -> str :
  "" op_asm str.store
  initialize_asm swap

  // Generate assembly for each Op in Program
  0 while dup Program.len int.load > do
    // Get the current Op
    dup2 Program.op_at

    // Generate comment for Op
    dup get_op_comment_asm op_asm str.load swap str.cat
    op_asm str.store

    // Concatenate Op's Assembly to op_asm
    get_op_asm op_asm str.load swap str.cat
    op_asm str.store
    1 +
  done drop2

  // Merge generated Assembly with the initialized Assembly
  op_asm str.load   str.cat
  get_exit_assembly str.cat
end
