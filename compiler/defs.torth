include "compiler/class/Constant.torth"
include "compiler/class/Function.torth"
include "compiler/class/Program.torth"
include "compiler/class/Token.torth"

// Keywords
const Keyword.BREAK         0  end
const Keyword.CONST         1  end
const Keyword.DO            2  end
const Keyword.DONE          3  end
const Keyword.ELIF          4  end
const Keyword.ELSE          5  end
const Keyword.END           6  end
const Keyword.ENDIF         7  end
const Keyword.FUNCTION      8  end
const Keyword.IF            9  end
const Keyword.MEMORY        10 end
const Keyword.WHILE         11 end

// Intrinsics
const Intrinsic.AND         0  end
const Intrinsic.ARGC        1  end
const Intrinsic.ARGV        2  end
const Intrinsic.DIVMOD      3  end
const Intrinsic.DROP        4  end
const Intrinsic.DUP         5  end
const Intrinsic.ENVP        6  end
const Intrinsic.EQ          7  end
const Intrinsic.GE          8  end
const Intrinsic.GT          9  end
const Intrinsic.HERE        10 end
const Intrinsic.INPUT       11 end
const Intrinsic.LE          12 end
const Intrinsic.LOAD_BYTE   13 end
const Intrinsic.LOAD_QWORD  14 end
const Intrinsic.LT          15 end
const Intrinsic.MINUS       16 end
const Intrinsic.MUL         17 end
const Intrinsic.NE          18 end
const Intrinsic.NOT         19 end
const Intrinsic.NTH         20 end
const Intrinsic.OR          21 end
const Intrinsic.OVER        22 end
const Intrinsic.PLUS        23 end
const Intrinsic.PRINT       24 end
const Intrinsic.PUTS        25 end
const Intrinsic.ROT         26 end
const Intrinsic.STORE_BYTE  27 end
const Intrinsic.STORE_QWORD 28 end
const Intrinsic.SWAP        29 end
const Intrinsic.SWAP2       30 end
const Intrinsic.SYSCALL0    31 end
const Intrinsic.SYSCALL1    32 end
const Intrinsic.SYSCALL2    33 end
const Intrinsic.SYSCALL3    34 end
const Intrinsic.SYSCALL4    35 end
const Intrinsic.SYSCALL5    36 end
const Intrinsic.SYSCALL6    37 end

// Operand types
const OpType.BREAK          0  end
const OpType.DO             1  end
const OpType.DONE           2  end
const OpType.ELIF           3  end
const OpType.ELSE           4  end
const OpType.END            5  end
const OpType.ENDIF          6  end
const OpType.IF             7  end
const OpType.INTRINSIC      8  end
const OpType.PUSH_ARRAY     9  end
const OpType.PUSH_CHAR      10 end
const OpType.PUSH_HEX       11 end
const OpType.PUSH_INT       12 end
const OpType.PUSH_PTR       13 end
const OpType.PUSH_STR       14 end
const OpType.WHILE          15 end

// Token types
const TokenType.ARRAY       0 end
const TokenType.BOOL        1 end
const TokenType.CHAR        2 end
const TokenType.HEX         3 end
const TokenType.INT         4 end
const TokenType.KEYWORD     5 end
const TokenType.PTR         6 end
const TokenType.STR         7 end
const TokenType.WORD        8 end

// Tuple[str, int, int] # Source file name, row, column
const Location.size  24 end

// Location(file_name, row, column)
function Location.store ptr str int int -> :
  ptr.store ptr++  // file_name
  ptr.store ptr++  // row
  ptr.store drop   // column
end

// Tuple[str, str, Location]  # Name, str(size), Location
const Memory.size 40 end

// # param types, return types
// Signature   = Tuple[List[str], List[str]]
const Signature 16 end

memory Program ptr.size end