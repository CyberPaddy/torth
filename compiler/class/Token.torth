// @dataclass
// class Token:
//     value: str
//     type: TokenType
//     location: Location
const Token.size 40 end
function Token.value  ptr -> any        :       load_QWORD end
function Token.type   ptr -> TokenType  : 8   + load_QWORD  end
function Token.file   ptr -> str        : 16  + load_QWORD end
function Token.row    ptr -> int        : 24  + load_QWORD end
function Token.col    ptr -> int        : 32  + load_QWORD end

// Pointer to the list of Tokens
memory tokens MEMORY_CAPACITY end

// *Token, value, TokenType, file, row, col
function Token.store ptr str int str int int -> :
  ptr.store ptr++   // Token.value
  ptr.store ptr++   // Token.type
  ptr.store ptr++   // Token.file
  ptr.store ptr++   // Token.row
  ptr.store ptr++   // Token.col
  drop
end

function Token.getType ptr -> str :
  Token.type
  if dup TokenType.ARRAY == do
    "TokenType.ARRAY"
  elif dup TokenType.BOOL == do
    "TokenType.BOOL"
  elif dup TokenType.CHAR == do
    "TokenType.CHAR"
  elif dup TokenType.HEX == do
    "TokenType.HEX"
  elif dup TokenType.INT == do
    "TokenType.INT"
  elif dup TokenType.KEYWORD == do
    "TokenType.KEYWORD"
  elif dup TokenType.PTR == do
    "TokenType.PTR"
  elif dup TokenType.STR == do
    "TokenType.STR"
  elif dup TokenType.WORD == do
    "TokenType.WORD"
  endif
  swap drop // Drop TokenType
end

function Token.output ptr -> :
  dup "Type     => " puts Token.getType puts "\n" puts
  dup "Location => File: " puts Token.file puts
  dup ", Row: " puts Token.row print
  dup ", Column: " puts Token.col print "\n" puts
  drop
end

function Token.print ptr -> :
  dup "Token    => " puts load_QWORD print "\n" puts
  Token.output
end

function Token.puts ptr -> :
  dup "Token    => " puts load_QWORD puts "\n" puts
  Token.output
end
