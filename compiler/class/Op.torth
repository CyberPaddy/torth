include "std"

// Op(id: int, type: OpType, token: Token, function: Function)
ENUM Op.size 8 :
  Op.id       // int
  Op.type     // OpType   => int
  Op.token    // Token    => ptr
  Op.function // Function => ptr
END

// Initialize Op from parameters
// Params: Op.id, Op.type, Op.token, Op.function
// Return: Pointer to Op
function Op.init int int ptr ptr -> ptr :
  // Allocate memory for Op
  Op.size malloc

  // Load the parameters to the allocated memory
  swap over Op.id       ptr+ int.store
  swap over Op.type     ptr+ int.store
  swap over Op.token    ptr+ ptr.store
  swap over Op.function ptr+ ptr.store
end

// Get Op.id
// Params: Pointer to Op (PTR)
// Return: Op.id (INT)
function Op.get_id ptr -> int :
  int.load
end

// Get Op.type
// Params: Pointer to Op (PTR)
// Return: Op.type (OpType => INT)
function Op.get_type ptr -> int :
  Op.type ptr+ int.load
end

// Get Op.token
// Params: Pointer to Op (PTR)
// Return: Op.token (Token => PTR)
function Op.get_token ptr -> ptr :
  Op.token ptr+ ptr.load
end

// Get Op.function
// Params: Pointer to Op (PTR)
// Return: Op.function (Function => PTR)
function Op.get_function ptr -> ptr :
  Op.function ptr+ ptr.load
end

// Print Op contents to stdout
// Params: Pointer to Op
// Return: None
function Op.print ptr :
  "Op.id              => " puts
  dup Op.id       ptr+
  int.load print "\n" puts

  "Op.type            => " puts
  dup Op.type     ptr+
  int.load print "\n" puts

  dup Op.token ptr+ ptr.load
  Token.print

  Op.function ptr+ ptr.load
  Function.print
end
