include "lib/errno.torth"
include "lib/sys.torth"
include "lib/math.torth"
const NULL 0 end

// Memory
const MEMORY_CAPACITY 430080 end  // 420 * 1024 => 420kb
memory file_buf MEMORY_CAPACITY end

// Data types
const bool.size 1 end
const char.size 1 end
const int.size  8 end
const ptr.size  8 end
const str.size  8 end

// File descriptors
const stdin  0 end
const stdout 1 end
const stderr 2 end

// Extra intrinsics
function div    int int     -> int          : divmod swap drop end
function mod    int int     -> int          : divmod drop end
function /      int int     -> int          : div end
function %      int int     -> int          : mod end
function drop2  any any     ->              : drop drop end
function dup2   any         -> any any      : over over end
function rev    any any any -> any any any  : swap rot end // Reverse the top 3 elements
function rotr   any any any -> any any any  : rot rot end // Reverse rot
function and    bool bool   -> bool         : if True ==  do True ==  else drop False endif           end
function or     bool bool   -> bool         : if False == do True ==  else drop True  endif           end
function not    bool        -> bool         : if dup      do False    else True       endif swap drop end

// int fd, char *buf, size_t count
function write int ptr int -> int : SYS_write syscall3 end
// int fd, char *buf, size_t count
function read int ptr int -> int ptr int : SYS_read syscall3 end
// const char *pathname, char *const argv[], char *const envp[]
function execve ptr arr arr -> int : SYS_execve syscall3 end
// int status
function exit int -> exit : SYS_exit syscall1 drop end

// int fd, char *buf
function fputs int str  -> : swap dup str.len swap rot write drop end
function puts  str      -> : stdout fputs end
function eputs str      -> : stderr fputs end

// Ptr functions
function int++  ptr     ->      : dup load_INT 1 + store_INT end  // Increment pointed value
function ptr+   ptr int -> ptr  : int swap int + ptr end
function ptr++  ptr     ->      : ptr.size ptr+ end

// Char functions
function char.lower char -> char :
  if dup 'A' <= do
    if dup 'Z' >= do
      32 + char
    endif
  endif
end

function char.upper char -> char :
  if dup 'a' <= do
    if dup 'z' >= do
      32 - char
    endif
  endif
end

function char.is_alphanumeric str int -> :
  // TODO: Implement AND and OR
  if dup2 str.char_at '0' > do
    False
  elif dup2 str.char_at '9' < do
    if dup2 str.char_at 'A' > do
      False
    elif dup2 str.char_at 'Z' < do
      if dup2 str.char_at 'a' > do
        False
      elif dup2 str.char_at 'z' < do
        False
      else
        True
      endif
    else
      True
    endif
  else
    True
  endif
end

// Str functions
function str.len str -> int :
  0 while dup2 ptr+ load_CHAR NULL != do
    1 +
  done swap drop
end

function str.append         str char  ->      : dup str.len ptr+ store_CHAR end
function str.char_at        str int   -> char : ptr+ load_CHAR end
function str.is_palindrome  str       -> bool : dup str.reverse streq end

function str.empty str -> :
  0 while dup2 ptr+ load_CHAR NULL != do
    dup2 ptr+ NULL char swap store_CHAR
    1 +
  done drop2
end

memory is_equal bool.size end
function streq str str -> bool :
  True is_equal store_BOOL // is_equal = True
  0 // index
  // while index < len(str1)
  while dup2 swap str.len > do
    if // str1[index] != str2[index]
      dup2        ptr+ load_CHAR
      over 5 nth  ptr+ load_CHAR
      !=
    do
      False is_equal store_BOOL // is_equal = False
      break
    endif
    1 +
  done

  if dup 4 nth ptr+ load_CHAR NULL != do
    False is_equal store_BOOL // is_equal = False
  endif
  drop drop drop // Drop strings and index

  // return is_equal
  is_equal load_BOOL
end

memory reversed_str MEMORY_CAPACITY end
function str.reverse str -> str :
  reversed_str str.empty
  dup str.len // index
  while 0 over > do
    1 -
    dup2 ptr+ load_CHAR // str[index]

    // reversed_str[index + 1 - str.len] = str[index]
    over 1 + 4 nth str.len swap - reversed_str ptr+ store_CHAR
  done drop2
  reversed_str // Return reversed string
end

// Returns: fd
function open_file file_name -> int :
  dup O_RDONLY swap SYS_open syscall2

  if    dup ENOENT  ==  do swap "File '" eputs eputs "' does not exist.\n" eputs 1 exit
  elif  dup EACCESS ==  do swap "Cannot open file '" eputs eputs "': Permission denied.\n" eputs 1 exit
  elif  dup 0 > do
    swap "Error occurred while opening the file '" eputs eputs "'.\nError code: " eputs dup print 1 exit
  else swap drop // Drop the file name
  endif
end

// Returns: the number of bytes read
function read_file file_name -> int :
  open_file
  MEMORY_CAPACITY file_buf rot read
end

// Returns: the number of bytes written
function print_file file_name -> int :
  read_file
  file_buf stdout write "\n" puts
end
