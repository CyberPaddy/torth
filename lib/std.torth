include "lib/errno.torth"
include "lib/sys.torth"
const NULL 0 end

// Memory
const MEMORY_CAPACITY 430080 end  // 420 * 1024 => 420kb
memory file_buf MEMORY_CAPACITY end

// Data types
const bool.size 1 end
const char.size 1 end
const int.size  8 end
const ptr.size  8 end
const str.size  8 end

// File descriptors
const stdin  0 end
const stdout 1 end
const stderr 2 end

// Extra intrinsics
function div int int -> int : divmod swap drop end
function mod int int -> int : divmod drop end
function / int int -> int : div end
function % int int -> int : mod end
function drop2 any any -> : drop drop end
function dup2 any -> any any : over over end
function rev any any any -> any any any : swap rot end // Reverse the top 3 elements
function rotr any any any -> any any any : rot rot end // Reverse rot

// Ptr functions
function >> int ptr -> : over load_BYTE swap rot + store_BYTE end  // Bit shift right
function << int ptr -> : over load_BYTE swap rot - store_BYTE end  // Bit shift left
function int++  ptr -> : dup load_QWORD 1 + store_BYTE end // Increment pointed value
function ptr+   ptr -> : char.size  + end
function ptr++  ptr -> : ptr.size   + end

// int fd, void *buf, size_t count
function write int ptr int -> int : SYS_write syscall3 end
// int fd, void *buf, size_t count
function read int ptr int -> int ptr int : SYS_read syscall3 end
// const char *pathname, char *const argv[], char *const envp[]
function execve ptr arr arr -> int : SYS_execve syscall3 end
// int status
function exit int -> exit : SYS_exit syscall1 drop end

// Returns: fd
function open_file file_name -> int :
  dup O_RDONLY swap SYS_open syscall2
  if    dup ENOENT  ==  do swap "File '" puts puts "' does not exist.\n" puts exit
  elif  dup EACCESS ==  do swap "Cannot open file '" puts puts "': Permission denied.\n" puts exit
  elif  dup 0 > do
    swap "Error occurred while opening the file '" puts puts "'.\nError code: " puts print exit
  endif
end

// Returns: the number of bytes read
function read_file file_name -> int :
  open_file
  MEMORY_CAPACITY file_buf rot read
end

// Returns: the number of bytes written
function print_file file_name -> int :
  read_file
  file_buf stdout write "\n" puts
end
