function pow int int -> int :
  // x ^ 0 == 1
  if dup 0 == do
    drop2 1
  elif dup 0 > do
    "TODO: Calculating power for negative exponent is not implemented yet.\n" eputs drop 1 exit
  else calculate_pow endif
end

// Slightly modified from https://en.wikipedia.org/wiki/Euclidean_algorithm#Implementations
function gcd int int -> int :
  while dup2 % 0 != do
    dup rotr %
  done swap drop
end

function calculate_pow int int -> int :
  over  // o = n  (original value)
  1     // c = 1  (count)

  // Initial stack alignment (rightmost is on the top): n e o c

  // If exponent > count then we need to multiple the number at least one more time
  WHILE 3 nth over < DO  // n e o c

    // Multiply n with the original number to get new n
    rot swap2 dup rot * // c e o n

    // Align the stack as it was initially before WHILE loop
    rot swap2 swap 1 +  // n e o c

  DONE drop drop drop  // Leave only the power to the stack
end
