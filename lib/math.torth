// math.torth - Library of mathematical functions

// Params: exponent, number
// Return: power
function pow int int -> int :
  // x ^ 0 == 1
  if dup 0 == do
    drop2 1
  elif dup 0 > do
    "TODO: Calculating power for negative exponent is not implemented yet.\n" eputs drop 1 exit
  else calculate_pow endif
end

// Slightly modified GCD function from https://en.wikipedia.org/wiki/Euclidean_algorithm#Implementations
// Params: num1, num2
// Return: gcd
function gcd int int -> int :
  while dup2 % 0 != do
    dup rotr %
  done swap drop
end

// Utility function for pow
// Params: exponent, number
// Return: power
memory pow_original_value 8 end
function calculate_pow int int -> int :
  over pow_original_value STORE_INT
  1 // count

  // If count < exponent then we need to multiple the number at least one more time
  WHILE over over < DO

    // Multiply n with the original number to get new n
    rot pow_original_value LOAD_INT * rotr

    // Increment count
    1 +

  DONE drop drop  // Leave only the power to the stack
end

// Return the square root of an integer rounded up to closest integer
function sqrt int -> int :
  0 while over over dup * < do
    1 +
  done swap drop
end
